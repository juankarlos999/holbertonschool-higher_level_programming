=====================
Doctest base_geometry
=====================

Class BaseGeometry:

Contains two methods Integer validator:
	integer_validator(self, name, value)
and other empty method:
	area(self)
both handles exceptions

Test instance
==============

** Test one argument **

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> my_test = BaseGeometry(10)
	Traceback (most recent call last):
		...
	TypeError: BaseGeometry() takes no arguments


** Test  with two arguments **

    >>> my_test = BaseGeometry(6, 2)
    Traceback (most recent call last):
		...
    TypeError: BaseGeometry() takes no arguments


** Test Instance **

	>>> my_test = BaseGeometry()
    >>> isinstance(my_test, BaseGeometry)
    True


** Test Subclass **

    >>> issubclass(type(my_test), BaseGeometry)
    True


** Test	Type MyList **

    >>> type(my_test) == BaseGeometry
    True


Test method
============

** call method with an argument **

	>>> my_test.area(4)
	Traceback (most recent call last):
		...
	TypeError: area() takes 1 positional argument but 2 were given

** Print List **

	>>> my_test = BaseGeometry()
	>>> type(my_test.area)
	<class 'method'>
	>>> type(my_test.integer_validator)
	<class 'method'>
	>>> my_test.area()
	Traceback (most recent call last):
		...
	Exception: area() is not implemented
	>>> my_test.integer_validator()
	Traceback (most recent call last):
		...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
    >>> my_test.integer_validator("String", "string")
    Traceback (most recent call last):
		...
    TypeError: String must be an integer
    >>> my_test.integer_validator("String", 1.0)
    Traceback (most recent call last):
		...
    TypeError: String must be an integer
    >>> my_test.integer_validator("String", 8, 2)
    Traceback (most recent call last):
		...
    TypeError: integer_validator() takes 3 positional arguments but 4 were given
    >>> my_test.integer_validator("String", -4)
    Traceback (most recent call last):
		...
    ValueError: String must be greater than 0
    >>> my_test.integer_validator("String")
    Traceback (most recent call last):
		...
    TypeError: integer_validator() missing 1 required positional argument: 'value'
	>>> my_test.integer_validator("String", 0)
	Traceback (most recent call last):
		...
	ValueError: String must be greater than 0
	>>> my_test.integer_validator("String", [3])
	Traceback (most recent call last):
		...
	TypeError: String must be an integer
	>>> my_test.integer_validator("String", True)
	>>> print(dir(my_test))
	['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'area', 'integer_validator']
	>>> my_test.integervalidator("String", 12)
	Traceback (most recent call last):
		...
	AttributeError: 'BaseGeometry' object has no attribute 'integervalidator'
	>>> my_test.integer_validator("String", 12)
